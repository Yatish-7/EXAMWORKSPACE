package com.klef.jfsd.exam;

import java.util.List;
import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Root;

public class ClientDemo 
{
    public static void main(String[] args) 
    {
    	ClientDemo clientDemo = new ClientDemo();
    	// clientDemo.addCustomer();
    	   clientDemo.queryCustomers();
    }
    public void addCustomer()
	{
		Configuration configuration = new Configuration();  
        configuration.configure("hibernate.cfg.xml");
        
        SessionFactory sf = configuration.buildSessionFactory();
        Session session = sf.openSession();
        
        Transaction t = session.beginTransaction();
        Scanner sc = new Scanner(System.in);
   
        System.out.println("Add Customer NAME:");
        String name = sc.next();
        
        System.out.println("Add Customr Email:");
        String email = sc.next();
        
        System.out.println("Add Customer Age");
        int age = sc.nextInt();
        
        System.out.println("Add Customer Location");
        String location = sc.next();
        
        Customer customer = new Customer();
        customer.setName(name);
        customer.setAge(age);
        customer.setEmail(email);
        customer.setLocation(location);
        session.persist(customer);
        t.commit();
        System.out.println("Customer Added SuccessFully");
        sc.close();
        session.close();
        sf.close();
        
        
	}
    private static void queryCustomers() 
    {
    	Configuration configuration = new Configuration();
        configuration.configure("hibernate.cfg.xml");
        
        SessionFactory sf = configuration.buildSessionFactory();
        Session session = sf.openSession();
        
        CriteriaBuilder cb = session.getCriteriaBuilder();
	      CriteriaQuery<Customer> cq = cb.createQuery(Customer.class);
	      Root<Customer> root = cq.from(Customer.class);
	      
	      cq.select(root).where(cb.greaterThan(root.get("age"), 20));
	      List<Customer> customers = session.createQuery(cq).getResultList();
	      
	      System.out.println("Customers older than 20:");
          for (Customer customer : customers) 
          {
              System.out.println(customer.getName() + " - " + customer.getAge());
          }
	      
    }
}
